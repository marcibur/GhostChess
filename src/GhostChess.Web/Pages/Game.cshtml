@page
@model GameModel
@{
    ViewData["Title"] = "Game";
}

@section CSS
{
    <link href="chess/css/chessboard-0.3.0.min.css" rel="stylesheet" />
}

<div class="container" style="        margin-top: 100px;
        margin-bottom: 100px;">
    <div id="popup" class="text-center"><input type="password" id="pass" /><br /><br /><button id="enter-pass">Gain access</button></div>
    <div class="main" style="        visibility: hidden">
        <div class="alert alert-primary text-center" id="message" style="        margin-bottom: 20px">Waiting for opponent...</div>
        <div>
            <div id="board" style="        width: 500px;
        margin-right: auto;
        margin-left: auto;
        visibility: hidden"></div>
            <div id="blocker" style="        background-color: white;
        position: absolute;
        top: 50px;
        opacity: 0.5;
        height: 100%;
        width: 80%;
        display: none
    "></div>
        </div>
    </div>
</div>
@section Scripts
    {
    <script src="js/jquery.min.js"></script>
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="lib/signalr/dist/browser/signalr.js"></script>
    <script src="chess/js/chessboard-0.3.0.min.js"></script>
    <script src="lib/chess.js/chess.min.js"></script>

    <script>
        var blocker = $('#blocker');
        var messageBox = $('#message')[0];
        var myTurn = false;
        var color = '';

        $('#enter-pass').click(function () {
            var password = $('#pass')[0].value;
            $('#popup').css('display', 'none');
            $('.main').css('visibility', 'initial');

            connection = new signalR.HubConnectionBuilder()
                .withUrl('/chess?Password=' + password)
                .build();

            var game = new Chess();

            var onDropEvent = function (source, target, piece, newPos, oldPos, orientation) {
                if (myTurn) {
                    var move = game.move({
                        from: source,
                        to: target
                    });

                    if (game.in_checkmate() === true) {
                        connection.invoke("Checkmate", true);
                        return;
                    }

                    if (move == null) {
                        return 'snapback';
                    }

                    var c = '';
                    if (color == 'WHITE') {
                        c = 'BLACK';
                    }
                    else {
                        c = 'WHITE';
                    }

                    messageBox.innerHTML = c + ' turn';
                    blocker.css('display', 'initial');
                    console.log('MOVED', source, target);
                    connection.invoke('Move', source, target);
                    //connection.invoke('Move', "a1", "a2");
                    console.log('INVOKED MOVE');
                    myTurn = false;
                }
            };

            var board = ChessBoard('board', {
                pieceTheme: 'chess/img/chesspieces/wikipedia/{piece}.png',
                draggable: true,
                onDrop: onDropEvent
            });

            connection.on('StartAndPlay', function () {
                color = 'WHITE';
                console.log('StartAndPlay');
                messageBox.innerHTML = 'WHITE turn';
                $('#board').css('visibility', 'initial');
                myTurn = true;
                board.start();
                //board.move('a1-a2');
            });

            connection.on('StartAndWait', function () {
                color = 'BLACK';
                console.log('StartAndWait');
                messageBox.innerHTML = 'WHITE turn';
                $('#board').css('visibility', 'initial');
                $('#blocker').css('display', 'initial');
                myTurn = false;
                board.start();
            });

            connection.on('Move', function (from, to) {
                console.log('Move');
                board.move(from + '-' + to);
                game.move({
                    from: from,
                    to: to
                });
                if (game.in_checkmate() === true) {
                    connection.invoke("Checkmate", false);
                    return;
                }
                messageBox.innerHTML = color + ' turn';
                myTurn = true;
                blocker.css('display', 'none');
            });

            connection.on('YouWin', function () {
                console.log('YouWin');
                messageBox.innerHTML = 'You win';
                blocker.css('display', 'initial');
            });

            connection.on('YouLoose', function (from, to) {
                console.log('YouLoose');
                messageBox.innerHTML = 'You loose';
                board.move(from + '-' + to);
                blocker.css('display', 'initial');
            });

            connection.on('End', function () {
                console.log('End');
                window.location.href = '/';
            });

            connection.onclose(function () {
                window.location.href = '/';
            });

            connection.start();
        });
    </script>
}
